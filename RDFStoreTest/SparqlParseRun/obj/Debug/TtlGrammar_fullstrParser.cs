//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Admin\Source\Repos\PolarDemo\SparqlParseRun\TtlGrammar_fullstr.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SparqlParseRun {

	using System;
	using System.Linq;
	using SparqlParseRun.RdfCommon;
	using SparqlParseRun.RdfCommon.Literals;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TtlGrammar_fullstrParser : Parser {
	public const int
		T__14=1, T__13=2, T__12=3, T__11=4, T__10=5, T__9=6, T__8=7, T__7=8, T__6=9, 
		T__5=10, T__4=11, T__3=12, T__2=13, T__1=14, T__0=15, IRIREF=16, PNAME_NS=17, 
		PNAME_LN=18, BLANK_NODE_LABEL=19, LANGTAG=20, INTEGER=21, DECIMAL=22, 
		DOUBLE=23, EXPONENT=24, STRING_LITERAL_QUOTE=25, STRING_LITERAL_SINGLE_QUOTE=26, 
		STRING_LITERAL_LONG_SINGLE_QUOTE=27, STRING_LITERAL_LONG_QUOTE=28, UCHAR=29, 
		ECHAR=30, WS=31, ANON=32, PN_CHARS_BASE=33, PN_CHARS_U=34, PN_CHARS=35, 
		PN_PREFIX=36, PN_LOCAL=37, PLX=38, PERCENT=39, HEX=40, PN_LOCAL_ESC=41, 
		LineComment=42;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'PREFIX'", "'a'", "')'", "'.'", "','", "'['", "'('", 
		"'false'", "'@base'", "';'", "'BASE'", "'@prefix'", "'true'", "'^^'", 
		"IRIREF", "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", "LANGTAG", "INTEGER", 
		"DECIMAL", "DOUBLE", "EXPONENT", "STRING_LITERAL_QUOTE", "STRING_LITERAL_SINGLE_QUOTE", 
		"STRING_LITERAL_LONG_SINGLE_QUOTE", "STRING_LITERAL_LONG_QUOTE", "UCHAR", 
		"ECHAR", "WS", "ANON", "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS", "PN_PREFIX", 
		"PN_LOCAL", "PLX", "PERCENT", "HEX", "PN_LOCAL_ESC", "LineComment"
	};
	public const int
		RULE_turtleDoc = 0, RULE_statement = 1, RULE_directive = 2, RULE_prefixID = 3, 
		RULE_base = 4, RULE_sparqlBase = 5, RULE_sparqlPrefix = 6, RULE_triples = 7, 
		RULE_predicateObjectList = 8, RULE_objectList = 9, RULE_subject = 10, 
		RULE_predicate = 11, RULE_object = 12, RULE_literal = 13, RULE_blankNodePropertyList = 14, 
		RULE_collection = 15, RULE_numericLiteral = 16, RULE_rDFLiteral = 17, 
		RULE_booleanLiteral = 18, RULE_boolean = 19, RULE_string = 20, RULE_iri = 21, 
		RULE_blankNode = 22;
	public static readonly string[] ruleNames = {
		"turtleDoc", "statement", "directive", "prefixID", "base", "sparqlBase", 
		"sparqlPrefix", "triples", "predicateObjectList", "objectList", "subject", 
		"predicate", "object", "literal", "blankNodePropertyList", "collection", 
		"numericLiteral", "rDFLiteral", "booleanLiteral", "boolean", "string", 
		"iri", "blankNode"
	};

	public override string GrammarFileName { get { return "TtlGrammar_fullstr.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	public string graphName;
	public NodeGeneratorFullString	ng=new NodeGeneratorFullString();
	public Action<string, string, ObjectVariant> foreachTriple;
	private readonly PrologueFullString prologue = new PrologueFullString();


	public TtlGrammar_fullstrParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TurtleDocContext : ParserRuleContext {
		public Action<string, string, ObjectVariant> ft;
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TurtleDocContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public TurtleDocContext(ParserRuleContext parent, int invokingState, Action<string, string, ObjectVariant> ft)
			: base(parent, invokingState)
		{
			this.ft = ft;
		}
		public override int RuleIndex { get { return RULE_turtleDoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterTurtleDoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitTurtleDoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurtleDoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurtleDocContext turtleDoc(Action<string, string, ObjectVariant> ft) {
		TurtleDocContext _localctx = new TurtleDocContext(_ctx, State, ft);
		EnterRule(_localctx, 0, RULE_turtleDoc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			foreachTriple=ft; 
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__8) | (1L << T__7) | (1L << T__5) | (1L << T__3) | (1L << T__2) | (1L << IRIREF) | (1L << PNAME_NS) | (1L << PNAME_LN) | (1L << BLANK_NODE_LABEL) | (1L << ANON))) != 0)) {
				{
				{
				State = 47; statement();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public TriplesContext triples() {
			return GetRuleContext<TriplesContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 57;
			switch (_input.La(1)) {
			case T__13:
			case T__5:
			case T__3:
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; directive();
				}
				break;
			case T__8:
			case T__7:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; triples();
				State = 55; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public SparqlBaseContext sparqlBase() {
			return GetRuleContext<SparqlBaseContext>(0);
		}
		public SparqlPrefixContext sparqlPrefix() {
			return GetRuleContext<SparqlPrefixContext>(0);
		}
		public BaseContext @base() {
			return GetRuleContext<BaseContext>(0);
		}
		public PrefixIDContext prefixID() {
			return GetRuleContext<PrefixIDContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_directive);
		try {
			State = 63;
			switch (_input.La(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; prefixID();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; @base();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61; sparqlPrefix();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62; sparqlBase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixIDContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRIREF;
		public ITerminalNode PNAME_NS() { return GetToken(TtlGrammar_fullstrParser.PNAME_NS, 0); }
		public ITerminalNode IRIREF() { return GetToken(TtlGrammar_fullstrParser.IRIREF, 0); }
		public PrefixIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterPrefixID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitPrefixID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixIDContext prefixID() {
		PrefixIDContext _localctx = new PrefixIDContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prefixID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__2);
			State = 66; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 67; _localctx._IRIREF = Match(IRIREF);
			State = 68; Match(T__10);
			 prologue.AddPrefix((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null), (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseContext : ParserRuleContext {
		public IToken _IRIREF;
		public ITerminalNode IRIREF() { return GetToken(TtlGrammar_fullstrParser.IRIREF, 0); }
		public BaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseContext @base() {
		BaseContext _localctx = new BaseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(T__5);
			State = 72; _localctx._IRIREF = Match(IRIREF);
			prologue.SetBase((_localctx._IRIREF!=null?_localctx._IRIREF.Text:null));
			State = 74; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparqlBaseContext : ParserRuleContext {
		public IToken _IRIREF;
		public ITerminalNode IRIREF() { return GetToken(TtlGrammar_fullstrParser.IRIREF, 0); }
		public SparqlBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparqlBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterSparqlBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitSparqlBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparqlBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparqlBaseContext sparqlBase() {
		SparqlBaseContext _localctx = new SparqlBaseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_sparqlBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__3);
			State = 77; _localctx._IRIREF = Match(IRIREF);
			prologue.SetBase((_localctx._IRIREF!=null?_localctx._IRIREF.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparqlPrefixContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRIREF;
		public ITerminalNode PNAME_NS() { return GetToken(TtlGrammar_fullstrParser.PNAME_NS, 0); }
		public ITerminalNode IRIREF() { return GetToken(TtlGrammar_fullstrParser.IRIREF, 0); }
		public SparqlPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparqlPrefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterSparqlPrefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitSparqlPrefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparqlPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparqlPrefixContext sparqlPrefix() {
		SparqlPrefixContext _localctx = new SparqlPrefixContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_sparqlPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__13);
			State = 81; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 82; _localctx._IRIREF = Match(IRIREF);
			 prologue.AddPrefix((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null), (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesContext : ParserRuleContext {
		public SubjectContext _subject;
		public BlankNodePropertyListContext _blankNodePropertyList;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public PredicateObjectListContext predicateObjectList() {
			return GetRuleContext<PredicateObjectListContext>(0);
		}
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public TriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triples; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesContext triples() {
		TriplesContext _localctx = new TriplesContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_triples);
		int _la;
		try {
			State = 92;
			switch (_input.La(1)) {
			case T__7:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; _localctx._subject = subject();
				State = 86; predicateObjectList(_localctx._subject.value);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; _localctx._blankNodePropertyList = blankNodePropertyList();
				State = 90;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << IRIREF) | (1L << PNAME_NS) | (1L << PNAME_LN))) != 0)) {
					{
					State = 89; predicateObjectList(_localctx._blankNodePropertyList.value );
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateObjectListContext : ParserRuleContext {
		public string subj;
		public PredicateContext _predicate;
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ObjectListContext objectList(int i) {
			return GetRuleContext<ObjectListContext>(i);
		}
		public IReadOnlyList<PredicateContext> predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public IReadOnlyList<ObjectListContext> objectList() {
			return GetRuleContexts<ObjectListContext>();
		}
		public PredicateObjectListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public PredicateObjectListContext(ParserRuleContext parent, int invokingState, string subj)
			: base(parent, invokingState)
		{
			this.subj = subj;
		}
		public override int RuleIndex { get { return RULE_predicateObjectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterPredicateObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitPredicateObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateObjectListContext predicateObjectList(string subj) {
		PredicateObjectListContext _localctx = new PredicateObjectListContext(_ctx, State, subj);
		EnterRule(_localctx, 16, RULE_predicateObjectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; _localctx._predicate = predicate();
			State = 95; objectList(_localctx.subj, _localctx._predicate.value);
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 96; Match(T__4);
				State = 100;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << IRIREF) | (1L << PNAME_NS) | (1L << PNAME_LN))) != 0)) {
					{
					State = 97; _localctx._predicate = predicate();
					State = 98; objectList(_localctx.subj, _localctx._predicate.value);
					}
				}

				}
				}
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		public string subj;
		public string pred;
		public ObjectContext _object;
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IReadOnlyList<ObjectContext> @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ObjectListContext(ParserRuleContext parent, int invokingState, string subj, string pred)
			: base(parent, invokingState)
		{
			this.subj = subj;
			this.pred = pred;
		}
		public override int RuleIndex { get { return RULE_objectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList(string subj, string pred) {
		ObjectListContext _localctx = new ObjectListContext(_ctx, State, subj, pred);
		EnterRule(_localctx, 18, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; _localctx._object = @object();
			 foreachTriple(_localctx.subj, _localctx.pred, _localctx._object.value);  
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9) {
				{
				{
				State = 109; Match(T__9);
				State = 110; _localctx._object = @object();
				 foreachTriple(_localctx.subj, _localctx.pred, _localctx._object.value); 
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		public string value;
		public IriContext _iri;
		public BlankNodeContext _blankNode;
		public CollectionContext _collection;
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public BlankNodeContext blankNode() {
			return GetRuleContext<BlankNodeContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_subject);
		try {
			State = 127;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; _localctx._iri = iri();
				_localctx.value = _localctx._iri.value;
				}
				break;
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; _localctx._blankNode = blankNode();
				_localctx.value = _localctx._blankNode.value;
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; _localctx._collection = collection();
				_localctx.value = _localctx._collection.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public string value;
		public IriContext _iri;
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_predicate);
		try {
			State = 134;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; _localctx._iri = iri();
				_localctx.value = _localctx._iri.value;
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(T__12);
				_localctx.value =  SpecialTypes.RdfType.FullName;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ObjectVariant value;
		public IriContext _iri;
		public BlankNodeContext _blankNode;
		public CollectionContext _collection;
		public BlankNodePropertyListContext _blankNodePropertyList;
		public LiteralContext _literal;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public BlankNodeContext blankNode() {
			return GetRuleContext<BlankNodeContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_object);
		try {
			State = 151;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; _localctx._iri = iri();
				 _localctx.value =  new ObjectVariant(0, _localctx._iri.value);
				}
				break;
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; _localctx._blankNode = blankNode();
				_localctx.value = new ObjectVariant(0, _localctx._blankNode.value);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142; _localctx._collection = collection();
				_localctx.value = new ObjectVariant(0, _localctx._collection.value);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 145; _localctx._blankNodePropertyList = blankNodePropertyList();
				_localctx.value = new ObjectVariant(0, _localctx._blankNodePropertyList.value);
				}
				break;
			case T__6:
			case T__1:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case STRING_LITERAL_QUOTE:
			case STRING_LITERAL_SINGLE_QUOTE:
			case STRING_LITERAL_LONG_SINGLE_QUOTE:
			case STRING_LITERAL_LONG_QUOTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 148; _localctx._literal = literal();
				_localctx.value = _localctx._literal.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ObjectVariant value;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public BooleanLiteralContext _booleanLiteral;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_literal);
		try {
			State = 162;
			switch (_input.La(1)) {
			case STRING_LITERAL_QUOTE:
			case STRING_LITERAL_SINGLE_QUOTE:
			case STRING_LITERAL_LONG_SINGLE_QUOTE:
			case STRING_LITERAL_LONG_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; _localctx._rDFLiteral = rDFLiteral();
				_localctx.value = _localctx._rDFLiteral.value;
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; _localctx._numericLiteral = numericLiteral();
				_localctx.value = _localctx._numericLiteral.value;
				}
				break;
			case T__6:
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; _localctx._booleanLiteral = booleanLiteral();
				_localctx.value = _localctx._booleanLiteral.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		public string value;
		public PredicateObjectListContext predicateObjectList() {
			return GetRuleContext<PredicateObjectListContext>(0);
		}
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNodePropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList() {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(T__8);
			_localctx.value =  ng.CreateBlankNode(graphName);
			State = 166; predicateObjectList(_localctx.value);
			State = 167; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public string value;
		public ObjectContext _object;
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IReadOnlyList<ObjectContext> @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__7);
			var nodes = new List<ObjectVariant>();
			State = 176;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__1) | (1L << IRIREF) | (1L << PNAME_NS) | (1L << PNAME_LN) | (1L << BLANK_NODE_LABEL) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << STRING_LITERAL_QUOTE) | (1L << STRING_LITERAL_SINGLE_QUOTE) | (1L << STRING_LITERAL_LONG_SINGLE_QUOTE) | (1L << STRING_LITERAL_LONG_QUOTE) | (1L << ANON))) != 0)) {
				{
				{
				State = 171; _localctx._object = @object();
				 nodes.Add(_localctx._object.value); 
				}
				}
				State = 178;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 179; Match(T__11);

				//_localctx.value = c.GetNode(t=> foreachTriple(t.Subject, t.Predicate, t.Object), s=>ng.CreateUriNode(s), ()=>ng.CreateBlankNode(graphName)); 
				            var rdfFirst = SpecialTypes.RdfFirst.FullName;
			            var rdfRest = SpecialTypes.RdfRest.FullName;
			                string sparqlBlankNodeFirst = ng.CreateBlankNode(graphName);
			                string sparqlBlankNodeNext = ng.CreateBlankNode(graphName);
			            foreach (var node in nodes.Take(nodes.Count - 1))
			            {
			                foreachTriple(sparqlBlankNodeNext, rdfFirst, node);
			                foreachTriple(sparqlBlankNodeNext, rdfRest, new ObjectVariant(0, sparqlBlankNodeNext = ng.CreateBlankNode(graphName)));
			            }
			            foreachTriple(sparqlBlankNodeNext, rdfFirst, nodes[nodes.Count - 1]);
			            foreachTriple(sparqlBlankNodeNext, rdfRest, new ObjectVariant(0, SpecialTypes.Nil.FullName));
			            _localctx.value =  sparqlBlankNodeFirst;
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ObjectVariant value;
		public IToken _INTEGER;
		public IToken _DECIMAL;
		public IToken _DOUBLE;
		public ITerminalNode DOUBLE() { return GetToken(TtlGrammar_fullstrParser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(TtlGrammar_fullstrParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TtlGrammar_fullstrParser.DECIMAL, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_numericLiteral);
		try {
			State = 188;
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; _localctx._INTEGER = Match(INTEGER);
				_localctx.value = ng.CreateLiteralNode(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null)));
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; _localctx._DECIMAL = Match(DECIMAL);
				_localctx.value = ng.CreateLiteralNode(decimal.Parse((_localctx._DECIMAL!=null?_localctx._DECIMAL.Text:null).Replace(".", ",")));
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; _localctx._DOUBLE = Match(DOUBLE);
				_localctx.value = ng.CreateLiteralNode(double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null).Replace(".", ",")));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RDFLiteralContext : ParserRuleContext {
		public ObjectVariant value;
		public StringContext _string;
		public IToken _LANGTAG;
		public IriContext _iri;
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode LANGTAG() { return GetToken(TtlGrammar_fullstrParser.LANGTAG, 0); }
		public RDFLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rDFLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterRDFLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitRDFLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRDFLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RDFLiteralContext rDFLiteral() {
		RDFLiteralContext _localctx = new RDFLiteralContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_rDFLiteral);
		try {
			State = 202;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; _localctx._string = @string();
				 _localctx.value = ng.CreateLiteralNode((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null)); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 193; _localctx._string = @string();
				State = 194; _localctx._LANGTAG = Match(LANGTAG);
				 _localctx.value = ng.CreateLang((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null), (_localctx._LANGTAG!=null?_localctx._LANGTAG.Text:null));
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 197; _localctx._string = @string();
				State = 198; Match(T__0);
				State = 199; _localctx._iri = iri();
				 _localctx.value = ng.CreateLiteralNode((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null), _localctx._iri.value);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ObjectVariant value;
		public BooleanContext _boolean;
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_booleanLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; _localctx._boolean = boolean();
			_localctx.value = ng.CreateLiteralNode(_localctx._boolean.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public bool value;
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_boolean);
		try {
			State = 211;
			switch (_input.La(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; Match(T__1);
				 _localctx.value = true; 
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(T__6);
				 _localctx.value = false; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL_LONG_SINGLE_QUOTE() { return GetToken(TtlGrammar_fullstrParser.STRING_LITERAL_LONG_SINGLE_QUOTE, 0); }
		public ITerminalNode STRING_LITERAL_QUOTE() { return GetToken(TtlGrammar_fullstrParser.STRING_LITERAL_QUOTE, 0); }
		public ITerminalNode STRING_LITERAL_SINGLE_QUOTE() { return GetToken(TtlGrammar_fullstrParser.STRING_LITERAL_SINGLE_QUOTE, 0); }
		public ITerminalNode STRING_LITERAL_LONG_QUOTE() { return GetToken(TtlGrammar_fullstrParser.STRING_LITERAL_LONG_QUOTE, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LITERAL_QUOTE) | (1L << STRING_LITERAL_SINGLE_QUOTE) | (1L << STRING_LITERAL_LONG_SINGLE_QUOTE) | (1L << STRING_LITERAL_LONG_QUOTE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public string value;
		public IToken _IRIREF;
		public IToken _PNAME_LN;
		public IToken _PNAME_NS;
		public ITerminalNode PNAME_NS() { return GetToken(TtlGrammar_fullstrParser.PNAME_NS, 0); }
		public ITerminalNode PNAME_LN() { return GetToken(TtlGrammar_fullstrParser.PNAME_LN, 0); }
		public ITerminalNode IRIREF() { return GetToken(TtlGrammar_fullstrParser.IRIREF, 0); }
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_iri);
		try {
			State = 221;
			switch (_input.La(1)) {
			case IRIREF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; _localctx._IRIREF = Match(IRIREF);
				_localctx.value = prologue.GetFromIri((_localctx._IRIREF!=null?_localctx._IRIREF.Text:null).Substring(1, (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null).Length-2));
				}
				break;
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; _localctx._PNAME_LN = Match(PNAME_LN);
				_localctx.value = prologue.GetUriFromPrefixed((_localctx._PNAME_LN!=null?_localctx._PNAME_LN.Text:null)); 
				}
				break;
			case PNAME_NS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; _localctx._PNAME_NS = Match(PNAME_NS);
				_localctx.value = prologue.GetUriFromPrefixedNamespace((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null)); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodeContext : ParserRuleContext {
		public string value;
		public IToken _BLANK_NODE_LABEL;
		public ITerminalNode ANON() { return GetToken(TtlGrammar_fullstrParser.ANON, 0); }
		public ITerminalNode BLANK_NODE_LABEL() { return GetToken(TtlGrammar_fullstrParser.BLANK_NODE_LABEL, 0); }
		public BlankNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.EnterBlankNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITtlGrammar_fullstrListener typedListener = listener as ITtlGrammar_fullstrListener;
			if (typedListener != null) typedListener.ExitBlankNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITtlGrammar_fullstrVisitor<TResult> typedVisitor = visitor as ITtlGrammar_fullstrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodeContext blankNode() {
		BlankNodeContext _localctx = new BlankNodeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_blankNode);
		try {
			State = 227;
			switch (_input.La(1)) {
			case BLANK_NODE_LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; _localctx._BLANK_NODE_LABEL = Match(BLANK_NODE_LABEL);
				_localctx.value = ng.CreateBlankNode((_localctx._BLANK_NODE_LABEL!=null?_localctx._BLANK_NODE_LABEL.Text:null),graphName);
				}
				break;
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(ANON);
				_localctx.value = ng.CreateBlankNode(graphName);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3,\xE8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\a\x2\x33\n\x2\f\x2"+
		"\xE\x2\x36\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3<\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\x42\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t]\n\t\x5\t_\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5"+
		"\ng\n\n\a\ni\n\n\f\n\xE\nl\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\vt\n\v"+
		"\f\v\xE\vw\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x82\n"+
		"\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x89\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x9A"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xA5"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\a\x11\xB1\n\x11\f\x11\xE\x11\xB4\v\x11\x3\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xBF\n\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\xCD\n\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\xD6\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5"+
		"\x17\xE0\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\xE6\n\x18\x3\x18\x2"+
		"\x2\x2\x19\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x2"+
		"\x3\x3\x2\x1B\x1E\xEC\x2\x30\x3\x2\x2\x2\x4;\x3\x2\x2\x2\x6\x41\x3\x2"+
		"\x2\x2\b\x43\x3\x2\x2\x2\nI\x3\x2\x2\x2\fN\x3\x2\x2\x2\xER\x3\x2\x2\x2"+
		"\x10^\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14m\x3\x2\x2\x2\x16\x81\x3\x2\x2\x2"+
		"\x18\x88\x3\x2\x2\x2\x1A\x99\x3\x2\x2\x2\x1C\xA4\x3\x2\x2\x2\x1E\xA6\x3"+
		"\x2\x2\x2 \xAB\x3\x2\x2\x2\"\xBE\x3\x2\x2\x2$\xCC\x3\x2\x2\x2&\xCE\x3"+
		"\x2\x2\x2(\xD5\x3\x2\x2\x2*\xD7\x3\x2\x2\x2,\xDF\x3\x2\x2\x2.\xE5\x3\x2"+
		"\x2\x2\x30\x34\b\x2\x1\x2\x31\x33\x5\x4\x3\x2\x32\x31\x3\x2\x2\x2\x33"+
		"\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x3\x3\x2"+
		"\x2\x2\x36\x34\x3\x2\x2\x2\x37<\x5\x6\x4\x2\x38\x39\x5\x10\t\x2\x39:\a"+
		"\a\x2\x2:<\x3\x2\x2\x2;\x37\x3\x2\x2\x2;\x38\x3\x2\x2\x2<\x5\x3\x2\x2"+
		"\x2=\x42\x5\b\x5\x2>\x42\x5\n\x6\x2?\x42\x5\xE\b\x2@\x42\x5\f\a\x2\x41"+
		"=\x3\x2\x2\x2\x41>\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41@\x3\x2\x2\x2\x42\a"+
		"\x3\x2\x2\x2\x43\x44\a\xF\x2\x2\x44\x45\a\x13\x2\x2\x45\x46\a\x12\x2\x2"+
		"\x46G\a\a\x2\x2GH\b\x5\x1\x2H\t\x3\x2\x2\x2IJ\a\f\x2\x2JK\a\x12\x2\x2"+
		"KL\b\x6\x1\x2LM\a\a\x2\x2M\v\x3\x2\x2\x2NO\a\xE\x2\x2OP\a\x12\x2\x2PQ"+
		"\b\a\x1\x2Q\r\x3\x2\x2\x2RS\a\x4\x2\x2ST\a\x13\x2\x2TU\a\x12\x2\x2UV\b"+
		"\b\x1\x2V\xF\x3\x2\x2\x2WX\x5\x16\f\x2XY\x5\x12\n\x2Y_\x3\x2\x2\x2Z\\"+
		"\x5\x1E\x10\x2[]\x5\x12\n\x2\\[\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2"+
		"\x2^W\x3\x2\x2\x2^Z\x3\x2\x2\x2_\x11\x3\x2\x2\x2`\x61\x5\x18\r\x2\x61"+
		"j\x5\x14\v\x2\x62\x66\a\r\x2\x2\x63\x64\x5\x18\r\x2\x64\x65\x5\x14\v\x2"+
		"\x65g\x3\x2\x2\x2\x66\x63\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2h"+
		"\x62\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2k\x13\x3\x2"+
		"\x2\x2lj\x3\x2\x2\x2mn\x5\x1A\xE\x2nu\b\v\x1\x2op\a\b\x2\x2pq\x5\x1A\xE"+
		"\x2qr\b\v\x1\x2rt\x3\x2\x2\x2so\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2"+
		"uv\x3\x2\x2\x2v\x15\x3\x2\x2\x2wu\x3\x2\x2\x2xy\x5,\x17\x2yz\b\f\x1\x2"+
		"z\x82\x3\x2\x2\x2{|\x5.\x18\x2|}\b\f\x1\x2}\x82\x3\x2\x2\x2~\x7F\x5 \x11"+
		"\x2\x7F\x80\b\f\x1\x2\x80\x82\x3\x2\x2\x2\x81x\x3\x2\x2\x2\x81{\x3\x2"+
		"\x2\x2\x81~\x3\x2\x2\x2\x82\x17\x3\x2\x2\x2\x83\x84\x5,\x17\x2\x84\x85"+
		"\b\r\x1\x2\x85\x89\x3\x2\x2\x2\x86\x87\a\x5\x2\x2\x87\x89\b\r\x1\x2\x88"+
		"\x83\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x89\x19\x3\x2\x2\x2\x8A\x8B\x5,\x17"+
		"\x2\x8B\x8C\b\xE\x1\x2\x8C\x9A\x3\x2\x2\x2\x8D\x8E\x5.\x18\x2\x8E\x8F"+
		"\b\xE\x1\x2\x8F\x9A\x3\x2\x2\x2\x90\x91\x5 \x11\x2\x91\x92\b\xE\x1\x2"+
		"\x92\x9A\x3\x2\x2\x2\x93\x94\x5\x1E\x10\x2\x94\x95\b\xE\x1\x2\x95\x9A"+
		"\x3\x2\x2\x2\x96\x97\x5\x1C\xF\x2\x97\x98\b\xE\x1\x2\x98\x9A\x3\x2\x2"+
		"\x2\x99\x8A\x3\x2\x2\x2\x99\x8D\x3\x2\x2\x2\x99\x90\x3\x2\x2\x2\x99\x93"+
		"\x3\x2\x2\x2\x99\x96\x3\x2\x2\x2\x9A\x1B\x3\x2\x2\x2\x9B\x9C\x5$\x13\x2"+
		"\x9C\x9D\b\xF\x1\x2\x9D\xA5\x3\x2\x2\x2\x9E\x9F\x5\"\x12\x2\x9F\xA0\b"+
		"\xF\x1\x2\xA0\xA5\x3\x2\x2\x2\xA1\xA2\x5&\x14\x2\xA2\xA3\b\xF\x1\x2\xA3"+
		"\xA5\x3\x2\x2\x2\xA4\x9B\x3\x2\x2\x2\xA4\x9E\x3\x2\x2\x2\xA4\xA1\x3\x2"+
		"\x2\x2\xA5\x1D\x3\x2\x2\x2\xA6\xA7\a\t\x2\x2\xA7\xA8\b\x10\x1\x2\xA8\xA9"+
		"\x5\x12\n\x2\xA9\xAA\a\x3\x2\x2\xAA\x1F\x3\x2\x2\x2\xAB\xAC\a\n\x2\x2"+
		"\xAC\xB2\b\x11\x1\x2\xAD\xAE\x5\x1A\xE\x2\xAE\xAF\b\x11\x1\x2\xAF\xB1"+
		"\x3\x2\x2\x2\xB0\xAD\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2"+
		"\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB5\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB6"+
		"\a\x6\x2\x2\xB6\xB7\b\x11\x1\x2\xB7!\x3\x2\x2\x2\xB8\xB9\a\x17\x2\x2\xB9"+
		"\xBF\b\x12\x1\x2\xBA\xBB\a\x18\x2\x2\xBB\xBF\b\x12\x1\x2\xBC\xBD\a\x19"+
		"\x2\x2\xBD\xBF\b\x12\x1\x2\xBE\xB8\x3\x2\x2\x2\xBE\xBA\x3\x2\x2\x2\xBE"+
		"\xBC\x3\x2\x2\x2\xBF#\x3\x2\x2\x2\xC0\xC1\x5*\x16\x2\xC1\xC2\b\x13\x1"+
		"\x2\xC2\xCD\x3\x2\x2\x2\xC3\xC4\x5*\x16\x2\xC4\xC5\a\x16\x2\x2\xC5\xC6"+
		"\b\x13\x1\x2\xC6\xCD\x3\x2\x2\x2\xC7\xC8\x5*\x16\x2\xC8\xC9\a\x11\x2\x2"+
		"\xC9\xCA\x5,\x17\x2\xCA\xCB\b\x13\x1\x2\xCB\xCD\x3\x2\x2\x2\xCC\xC0\x3"+
		"\x2\x2\x2\xCC\xC3\x3\x2\x2\x2\xCC\xC7\x3\x2\x2\x2\xCD%\x3\x2\x2\x2\xCE"+
		"\xCF\x5(\x15\x2\xCF\xD0\b\x14\x1\x2\xD0\'\x3\x2\x2\x2\xD1\xD2\a\x10\x2"+
		"\x2\xD2\xD6\b\x15\x1\x2\xD3\xD4\a\v\x2\x2\xD4\xD6\b\x15\x1\x2\xD5\xD1"+
		"\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6)\x3\x2\x2\x2\xD7\xD8\t\x2\x2\x2\xD8"+
		"+\x3\x2\x2\x2\xD9\xDA\a\x12\x2\x2\xDA\xE0\b\x17\x1\x2\xDB\xDC\a\x14\x2"+
		"\x2\xDC\xE0\b\x17\x1\x2\xDD\xDE\a\x13\x2\x2\xDE\xE0\b\x17\x1\x2\xDF\xD9"+
		"\x3\x2\x2\x2\xDF\xDB\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0-\x3\x2\x2\x2"+
		"\xE1\xE2\a\x15\x2\x2\xE2\xE6\b\x18\x1\x2\xE3\xE4\a\"\x2\x2\xE4\xE6\b\x18"+
		"\x1\x2\xE5\xE1\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6/\x3\x2\x2\x2\x14\x34"+
		";\x41\\^\x66ju\x81\x88\x99\xA4\xB2\xBE\xCC\xD5\xDF\xE5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SparqlParseRun
